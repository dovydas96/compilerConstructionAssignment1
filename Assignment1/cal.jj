/*******************************
 ***** SECTION 1 - OPTIONS *****
 *******************************/

options {
    IGNORE_CASE = true;
    JAVA_UNICODE_ESCAPE = true;
} 


/*********************************
 ***** SECTION 2 - USER CODE *****
 *********************************/

PARSER_BEGIN(CALParser)


public class CALParser {

    public static void main(String[] args) {

        // Initialise parser to read
        CALParser parser;
        if (args.length == 0) {

            System.out.println("Reading from standard input...");
            parser = new CALParser(System.in);

        } else if (args.length == 1) {
            try {
                parser = new CALParser(new java.io.FileInputStream(args[0])); 
            } catch (java.io.FileNotFoundException e) {
                System.err.println("File " + args[0] + " not found.");
                return;
            }

        } else {
    
            System.out.println("CAL Parser: Usage is one of:");
            System.out.println("    java CALParser < inputfile");
            System.out.println("OR");
            System.out.println("    java CALParser inputfile");
            return;
        }


    // Parse the file
    try {
        parser.program();
        System.out.println("Parsed successfully.");
    } catch (ParseException e) {
        System.out.println(e.getMessage());
        System.out.println("Encountered errors during parse.");
        }
    }
}

PARSER_END(CALParser)


/*****************************************
 ***** SECTION 3 - TOKEN DEFINITIONS *****
 *****************************************/

TOKEN_MGR_DECLS :
{
    static int commentNesting = 0;
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
    " "
  | "\t"
  | "\n" 
  | "\r" 
  | "\f" 
}

/* Ingore comments */
SKIP : {
    < "//" ([" "-"~"])* ("\n" | "\r" | "\r\n") >
  |   "/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
    "/*" { commentNesting++; }
  | "*/" { commentNesting--;
          if (commentNesting == 0)
              SwitchTo(DEFAULT);
         }
  /* Anything not recognised */
  | <~[]>
}

TOKEN : /* KEYWORDS */
{
    < VARIABLE : "variable" >
  | < CONSTANT : "constant" >
  | < RETURN : "return" >
  | < INTEGER : "integer" >
  | < BOOLEAN : "boolean" >
  | < VOID : "void" >
  | < MAIN : "main" >
  | < IF : "if" >
  | < ELSE : "else" >
  | < TRUE : "true" >
  | < FALSE : "false" >
  | < WHILE : "while" >
  | < SKP : "skip" >
  | < COMMA : "," >
  | < SEMIC : ";" >
  | < COLON : ":" >
  | < ASSIGN : ":=" >
  | < BEGIN : "begin" >
  | < IS : "is" > 
  | < END : "end" >
  | < LBR : "(" >
  | < RBR : ")" >
  | < PLUS : "+" >
  | < MINUS : "-" >
  | < NOT : "~" >
  | < OR : "|" >
  | < AND : "&" >
  | < EQUAL : "=" >
  | < NOT_EQUAL : "!=" >
  | < LESS_THAN : "<" >
  | < LESS_THAN_EQUAL_TO : "<=" >
  | < GREATER_THAN : ">" >
  | < GREATER_THAN_EQUAL_TO : ">=" >
}

TOKEN : /* VALUES */
{
    < #DIGIT: ["0"-"9"] >
  | < NUMBER: ( ("-")? ["1"-"9"] (<DIGIT>)* ) |
              "0" >
  | < #LETTER: ["a"-"z"] >
  | < ID: <LETTER> ( <LETTER> | <DIGIT> | "_" )* >
}


TOKEN : /* Anything not recognised so far */
{
    < OTHER : ~[] >
}

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/

void program() : {}
{
    decl_list() function_list() main()
}

void decl_list() : {}
{
    ( decl() <SEMIC> decl_list() )?
}

void decl() : {}
{
    var_decl()
|   const_decl()
}

void var_decl() : {}
{
    <VARIABLE> <ID> <COLON> type()
}

void const_decl() : {}
{
    <CONSTANT> <ID> <COLON> type() <ASSIGN> expression()
}

void function_list() : {}
{
    ( (function() function_list()) )?
}

void function() : {}
{
    type() <ID> <LBR> parameter_list() <RBR> <IS>
    decl_list()
    <BEGIN>
    statement_block()
    <RETURN> <LBR> ( expression() )? <RBR> <SEMIC>
    <END>
}

void type() : {}
{
    <INTEGER>
|   <BOOLEAN>
|   <VOID>
}

void parameter_list() : {}
{
    ( nemp_parameter_list() )?
}

void nemp_parameter_list() : {}
{
    <ID> <COLON> type() nemp_parameter_list_choice()
}

void nemp_parameter_list_choice() : {}
{
    ( <COMMA> nemp_parameter_list() )?
}

void main() : {}
{
    <MAIN>
    <BEGIN>
    decl_list()
    statement_block()
    <END>
}

void statement_block() : {}
{
    ( statement() statement_block() )?
}

void statement() : {}
{
    <ID> statement_choice()    
|   <BEGIN> statement_block() <END>
|   <IF> condition() <BEGIN> statement_block() <END>
|   <ELSE> <BEGIN> statement_block() <END>
|   <WHILE> condition() <BEGIN> statement_block() <END>
|   <SKP> <SEMIC>
}

void statement_choice() : {}
{
    <ASSIGN> expression() <SEMIC>
|   <LBR> arg_list() <RBR> <SEMIC>
}


void expression() : {}
{
    fragment() ( binary_arith_op() fragment() )?
}


void binary_arith_op() : {}
{
    <PLUS> 
  | <MINUS>
}

void fragment() : {}
{
    
    <ID> ( LOOKAHEAD(2) <LBR> arg_list() <RBR> )? 
|   <MINUS>  <ID>
|   <NUMBER>
|   <TRUE>
|   <FALSE>
|   <BEGIN> expression() <END>
}


void condition() : {}
{
    condition_simple() condition_choice()
}

void condition_choice() : {}
{
    <AND> condition()
|   <OR> condition()
|   {}
}

void condition_simple() : {}
{
    <NOT> condition()
|   LOOKAHEAD(2) <LBR> condition() <RBR>
|   expression() comp_op() expression()
}

void comp_op() : {}
{
    <EQUAL>
|   <NOT_EQUAL>
|   <LESS_THAN>
|   <LESS_THAN_EQUAL_TO>
|   <GREATER_THAN>
|   <GREATER_THAN_EQUAL_TO>
}

void arg_list() : {}
{
    ( nemp_arg_list() )?
}

void nemp_arg_list() : {}
{
    <ID> ( <COMMA> nemp_arg_list() )?
}
